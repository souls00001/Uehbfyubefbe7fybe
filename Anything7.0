local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local zoomSpeed = 3 -- Distance per scroll
local zoomTime = 0.2 -- Smooth zoom duration
local isPhasing = false -- Phase toggle state
local keybind = nil -- Keybind initially nil
local isListeningForKey = false

-- Function to toggle phasing on/off
local function togglePhase()
    isPhasing = not isPhasing

    if isPhasing then
        humanoidRootPart.CanCollide = false -- Disable collision to phase through walls
    else
        humanoidRootPart.CanCollide = true -- Re-enable collision
    end
end

local function zoomCharacter()
    if not isPhasing then return end -- Only zoom if phasing is enabled

    local lookVector = humanoidRootPart.CFrame.LookVector
    local targetCFrame = humanoidRootPart.CFrame + (lookVector * zoomSpeed)

    local tweenInfo = TweenInfo.new(zoomTime, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = targetCFrame})

    tween:Play()
end

local function onInputChanged(input, gameProcessed)
    if gameProcessed then return end

    if input.UserInputType == Enum.UserInputType.MouseWheel and input.Position.Z > 0 then
        zoomCharacter() -- Only zoom forward
    end
end

local function onInputBegan(input, gameProcessed)
    if gameProcessed then return end

    if isListeningForKey and input.UserInputType == Enum.UserInputType.Keyboard then
        keybind = input.KeyCode
        isListeningForKey = false
        print("Keybind set to: " .. tostring(keybind))
    elseif keybind and input.KeyCode == keybind then
        togglePhase()
    end
end

function setKeybind()
    isListeningForKey = true
    print("Press a key to set as the keybind")
end

UserInputService.InputBegan:Connect(onInputBegan)
UserInputService.InputChanged:Connect(onInputChanged)
