-- Services
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local movementSpeed = 20 -- Speed in studs per second

-- Ensure RemoteEvent exists for server teleport
if not ReplicatedStorage:FindFirstChild("TeleportEvent") then
    local teleportEvent = Instance.new("RemoteEvent")
    teleportEvent.Name = "TeleportEvent"
    teleportEvent.Parent = ReplicatedStorage
end

-- Teleport positions
local teleportPositions = {
    Vector3.new(218, 4, -332), -- 1st
    Vector3.new(216, 4, -355), -- 2nd
    Vector3.new(-43, 4, -354), -- 3rd
    Vector3.new(-44, 4, -323), -- 4th
    Vector3.new(-50, 4, -320), -- 5th (wait 43 sec & spam E)
    Vector3.new(-42, 4, -332), -- 6th
    Vector3.new(-43, 4, -354)  -- 7th
}

-- Boolean flag to control the loop
local isLooping = false

-- Function to press "E"
local function pressEOnce()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
    wait(0.5)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
end

-- Function to spam "E" for 11 seconds
local function spamE()
    local endTime = tick() + 11
    while tick() < endTime do
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
        wait(0.1)
    end
end

-- Function to equip Fake ID
local function equipFakeID()
    local backpack = player.Backpack
    for _, item in ipairs(backpack:GetChildren()) do
        if item.Name == "Fake ID" and item:IsA("Tool") then
            player.Character.Humanoid:EquipTool(item)
            print("Fake ID equipped!")
            return true
        end
    end
    print("No Fake ID found in the inventory.")
    return false
end

-- Function to move the character to the target position
local function moveToTarget(targetPosition, waitTime, spamEAction, equipFakeIDAction, callback)
    if not isLooping then return end -- Stop movement if loop is turned off
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = player.Character.HumanoidRootPart
        local startPosition = humanoidRootPart.Position
        local distance = (targetPosition - startPosition).magnitude
        local duration = distance / movementSpeed
        local startTime = tick()
        local moveConnection

        moveConnection = RunService.Heartbeat:Connect(function()
            if not isLooping then moveConnection:Disconnect() return end -- Stop movement if loop is turned off
            local elapsedTime = tick() - startTime
            if elapsedTime < duration then
                humanoidRootPart.CFrame = CFrame.new(startPosition:Lerp(targetPosition, elapsedTime / duration))
            else
                humanoidRootPart.CFrame = CFrame.new(targetPosition)
                moveConnection:Disconnect()
                pressEOnce()
                if equipFakeIDAction then equipFakeID() end
                if spamEAction then spamE() end
                wait(waitTime)
                if callback then callback() end
            end
        end)
    end
end

-- Function to start the sequence
local function startSequence()
    if not isLooping then return end -- Stop sequence if loop is turned off
    moveToTarget(teleportPositions[1], 3, false, false, function()
        if not isLooping then return end
        moveToTarget(teleportPositions[2], 0, false, true, function()
            if not isLooping then return end
            moveToTarget(teleportPositions[3], 0, false, false, function()
                if not isLooping then return end
                moveToTarget(teleportPositions[4], 0, false, false, function()
                    if not isLooping then return end
                    moveToTarget(teleportPositions[5], 43, true, false, function()
                        if not isLooping then return end
                        moveToTarget(teleportPositions[6], 0, false, false, function()
                            if not isLooping then return end
                            moveToTarget(teleportPositions[7], 0, false, false, function()
                                if not isLooping then return end
                                startSequence()
                            end)
                        end)
                    end)
                end)
            end)
        end)
    end)
end

-- Function to toggle looping
local function toggleLoop()
    isLooping = not isLooping
    if isLooping then
        print("Looping started.")
        startSequence()
    else
        print("Looping stopped.")
    end
end

-- Detect X key press to toggle the loop
game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end  -- Ignore input if it's already processed by something else
    if input.KeyCode == Enum.KeyCode.X then  -- Changed to X key
        toggleLoop()  -- Call toggleLoop to start/stop the loop
    end
end)


